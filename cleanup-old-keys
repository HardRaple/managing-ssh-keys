#!/usr/bin/env python3

import os
import re
from datetime import datetime, timedelta

AUTH_KEYS_PATH = os.path.expanduser("~/.ssh/authorized_keys")
TIMESTAMP_FORMAT = "%Y-%m-%dT%H:%M:%S"  # Format without prefix #TIMESTAMP=
MAX_AGE_DAYS = 30

def cleanup_keys():
    now = datetime.now()
    cutoff = now - timedelta(days=MAX_AGE_DAYS)

    with open(AUTH_KEYS_PATH, "r") as f:
        lines = f.readlines()

    new_lines = []
    removed_count = 0

    for line in lines:
        line = line.strip()
        if not line:
            continue

        # Searching timestamp
        match = re.search(r"#TIMESTAMP=(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})", line)

        # Keys without timestamps will be saved
        if not match:
            new_lines.append(line)
            continue

        try:
            # Extracting only timestamp value (without #TIMESTAMP=)
            ts_str = match.group(1)
            ts = datetime.strptime(ts_str, TIMESTAMP_FORMAT)

            if ts < cutoff:
                removed_count += 1
                print(f"Removed key: {line}")
            else:
                new_lines.append(line)

        except ValueError as e:
            print(f"Error in line: {line[:50]}... ({str(e)})")
            new_lines.append(line)  # Saving problematic key

    with open(AUTH_KEYS_PATH, "w") as f:
        f.write("\n".join(new_lines) + "\n")

    print(f"Removed keys count: {removed_count}")

if __name__ == "__main__":
    cleanup_keys()
